const express = require('express');
const fs = require('fs');
const path = require('path');
const formidable = require('formidable');
const { default: makeWASocket, useMultiFileAuthState, fetchLatestBaileysVersion } = require('@whiskeysockets/baileys');

const app = express();
const PORT = process.env.PORT || 3000;
const sessionFolder = path.join(__dirname, 'session');

if (!fs.existsSync(sessionFolder)) fs.mkdirSync(sessionFolder);
app.use(express.static(path.join(__dirname, '../public')));

let globalSocket;

async function startSocket() {
Â  const { state, saveCreds } = await useMultiFileAuthState(sessionFolder);
Â  const { version } = await fetchLatestBaileysVersion();

Â  const sock = makeWASocket({
Â  Â  version,
Â  Â  auth: state,
Â  Â  browser: ['Render Bot', 'Chrome', '1.0'],
Â  Â  printQRInTerminal: false,
Â  Â  getMessage: async () => ({ conversation: "hello" })
Â  });

Â  sock.ev.on('creds.update', saveCreds);
Â  globalSocket = sock;

Â  return sock;
}

startSocket();

app.get('/api', async (req, res) => {
Â  try {
Â  Â  const sock = globalSocket || await startSocket();
Â  Â  if (!sock.authState.creds.registered) {
Â  Â  Â  const code = await sock.requestPairingCode("91XXXXXXXXXX"); // Change if needed
Â  Â  Â  console.log('ðŸ”‘ Pairing Code:', code);
Â  Â  Â  return res.status(200).json({ code });
Â  Â  } else {
Â  Â  Â  return res.status(200).json({ message: 'âœ… Already logged in.' });
Â  Â  }
Â  } catch (err) {
Â  Â  return res.status(500).json({ error: err.message });
Â  }
});

app.post('/api', (req, res) => {
Â  const form = new formidable.IncomingForm({ multiples: false });
Â  form.uploadDir = sessionFolder;

Â  form.parse(req, async (err, fields, files) => {
Â  Â  if (err) return res.status(500).json({ error: 'Form parse error' });

Â  Â  const { receiver, delay } = fields;
Â  Â  const delaySec = parseInt(delay) || 5;

Â  Â  try {
Â  Â  Â  const sock = globalSocket || await startSocket();
Â  Â  Â  const jid = receiver + '@s.whatsapp.net';

Â  Â  Â  if (files.file) {
Â  Â  Â  Â  const file = Array.isArray(files.file) ? files.file[0] : files.file;
Â  Â  Â  Â  const filePath = file.filepath || file.path;
Â  Â  Â  Â  const message = fs.readFileSync(filePath, 'utf-8').trim();

Â  Â  Â  Â  res.status(200).json({ message: `ðŸŸ¢ Sending message to ${receiver} in loop` });

Â  Â  Â  Â  // Send message in infinite loop
Â  Â  Â  Â  (async function loopSend() {
Â  Â  Â  Â  Â  while (true) {
Â  Â  Â  Â  Â  Â  await sock.sendMessage(jid, { text: message });
Â  Â  Â  Â  Â  Â  await new Promise(resolve => setTimeout(resolve, delaySec * 1000));
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  })();
Â  Â  Â  } else {
Â  Â  Â  Â  return res.status(400).json({ error: 'No file uploaded' });
Â  Â  Â  }
Â  Â  } catch (err) {
Â  Â  Â  return res.status(500).json({ error: err.message });
Â  Â  }
Â  });
});

app.listen(PORT, () => {
Â  console.log(`âœ… Server running on port ${PORT}`);
});
    
